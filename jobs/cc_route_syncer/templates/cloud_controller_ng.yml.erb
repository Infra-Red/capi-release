<%
  def yaml_escape(input_string)
    chars_to_escape = /[:\\"\x00-\x1f\x7f]/
    chars_needing_quotes = /[ !#'&%*,:>@\[\]\\`{|}]/
    delimiter = (chars_needing_quotes.match(input_string) ||
              chars_to_escape.match(input_string)) ? '"' : ''
    fixed_string = input_string.gsub(/(#{chars_to_escape})/) { |m| "\\x#{'%x' % m.ord}" }

    "#{delimiter}#{fixed_string}#{delimiter}"
  end

  def extract_active_encryption_key_label(keys)
    return '' if keys.empty?
    active_keys = keys.select { |key| key['active'] }
    if active_keys.length == 1
      return active_keys.first['label']
    end
    raise "Error for database_encryption: #{active_keys.length} were marked active. Only one key may be active"
  end
%>


---
pid_filename: /var/vcap/sys/run/cc_route_syncer/cc_route_syncer.pid

index: <%= spec.index %>
name: <%= name %>

logging:
  file: /var/vcap/sys/log/cc_route_syncer/cc_route_syncer.log
  syslog: vcap.cloud_controller_ng
  level: "<%= p("cc.logging_level") %>"
  max_retries: <%= p("cc.logging_max_retries") %>
  format:
    timestamp: <%= link("cloud_controller_internal").p("cc.logging.format.timestamp") %>

<% db = p("ccdb.databases").find { |db| db["tag"] == "cc" } %>
<% db_role = p("ccdb.roles").find { |role| role["tag"] == "admin" } %>
<%
  database_address = nil
  if_p('ccdb.address') do |host|
    database_address = host
  end.else do
    database_address = link('database').instances[0].address
  end
%>
max_migration_duration_in_minutes: <%= p("ccdb.max_migration_duration_in_minutes") %>
db: &db
  database:
    adapter: <%= p("ccdb.db_scheme") == "mysql" ? "mysql2" : p("ccdb.db_scheme") %>
    host: <%= database_address %>
    port: <%= p("ccdb.port") %>
    user: <%= db_role["name"] %>
    password: <%= yaml_escape(db_role["password"]) %>
    database: <%= db["name"] %>
  max_connections: <%= p("ccdb.max_connections") %>
  pool_timeout: <%= p("ccdb.pool_timeout") %>
  log_level: "<%= p("cc.db_logging_level") %>"
  log_db_queries: <%= p("cc.log_db_queries") %>
  ssl_verify_hostname: <%= p("ccdb.ssl_verify_hostname") %>
  read_timeout: <%= p("ccdb.read_timeout") %>
  connection_validation_timeout: <%= p("ccdb.connection_validation_timeout") %>
<% if_p('ccdb.ca_cert') do %>
  ca_cert_path: '/var/vcap/jobs/cc_route_syncer/config/certs/db_ca.crt'
<% end %>

db_encryption_key: <%= p("cc.db_encryption_key") %>

<% if_p("cc.database_encryption") do | database_encryption |
     keys = database_encryption['keys']
     if keys.is_a?(Array)
       current_key_label = extract_active_encryption_key_label(keys)
       keys = keys.reduce({}) do |result, key_hash|
        result[key_hash['label']] = key_hash['encryption_key']
        result
       end
     elsif keys.is_a?(Hash)
       current_key_label = database_encryption['current_key_label']
     end
%>

database_encryption:
  keys: <%= keys.to_json %>
  current_key_label: <%= current_key_label.inspect %>
  pbkdf2_hmac_iterations: <%= link("cloud_controller_internal").p("cc.database_encryption.experimental_pbkdf2_hmac_iterations") %>
<% end %>

<% if_link("cloud_controller_container_networking_info") do |info|
  internal_vip_range = "#{info.p("cc.internal_route_vip_range")}"
  raise StandardError.new("invalid cc.internal_route_vip_range: #{internal_vip_range}") unless internal_vip_range =~ /\A (?:\d{1,3}\.){3} \d{1,3} \/ \d{1,3} \z/x

  parts = internal_vip_range.split(/[\.\/]/).map(&:to_i)
  raise StandardError.new("invalid cc.internal_route_vip_range: #{internal_vip_range}") if parts[0..3].any? {|x| x > 255} || parts[4] > 32
%>
internal_route_vip_range: <%= internal_vip_range %>
<% end %>



<% if_link("cloud_controller_to_copilot_conn") do |copilot_conn| %>
copilot:
  enabled: <%= link("cloud_controller_internal").p("copilot.enabled") %>
  host: <%= link("cloud_controller_internal").p("copilot.host") %>
  port: <%= copilot_conn.p("listen_port_for_cloud_controller") %>
  temporary_istio_domains: <%= link("cloud_controller_internal").p("copilot.temporary_istio_domains").flatten %>
  client_ca_file: /var/vcap/jobs/cc_route_syncer/config/certs/copilot_ca.crt
  client_key_file: /var/vcap/jobs/cc_route_syncer/config/certs/copilot.key
  client_chain_file: /var/vcap/jobs/cc_route_syncer/config/certs/copilot.crt
  sync_frequency_in_seconds: <%= p("copilot.sync_frequency_in_seconds") %>
<% end %>
